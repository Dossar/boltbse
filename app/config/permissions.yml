# This file defines role-based access control for your Bolt site.
# Before making any modifications to this file, make sure you've thoroughly read
# the documentation at http://docs.bolt.cm/permissions, and understand the
# consequences of making uninformed changes to the roles and permissions.

# First, we need to define some roles. There are three built-in roles that you
# should never add manually:
# - 'root', the "superuser" role; Bolt will automatically grant all permissions
#   to this role. Manually adding it to any permission is pointless, because it
#   implicitly grants every permission anyway.
# - 'everyone', the "base" role; every logged-in user automatically has this
#   role. Adding the 'everyone' role to any permission will grant it to all
#   users (but not to unauthenticated users).
# - 'owner': this role is only valid in the context of an individual content
#   item, and the user who "owns" the item (usually the person who created it)
#   will be in the 'owner' role.
# - 'anonymous': this role is automatically assigned at all times, even when
#   no user is logged in at all.
roles:
    admin:
        description: User-level administrator.
        label: Administrator
    judge:
        description: Judge User can create songs and reviews.
        label: Judge
    stepuser:
        description: Stepartist User that can create song submissions.
        label: Stepuser

# Role hierarchy settings
roles-hierarchy:
    # This will restrict users from being able to add, edit, enable, disable
    # and delete users with the same or higher role than their own.
    # For example:
    # Users with a role of admin can only be added, edited, enabled, disabled
    # and deleted by [ root, admin ] roles.
    manipulate:
        admin: [ ]
        judge: [ admin ]
        stepuser: [ admin ]


# Now we'll define some permissions. Each permission comes with a list of roles
# that grant access.

# The first set of permissions are the 'global' permissions; these are not tied
# to any content types, but rather apply to global, non-content activity in
# Bolt's backend. Most of these permissions map directly to backend routes;
# keep in mind, however, that routes do not always correspond to URL paths 1:1.
# The default set defined here is appropriate for most sites, so most likely,
# you will not have to change it.
# Also note that the 'editcontent' and 'overview' routes are special-cased
# inside the code, so they don't appear here.
global:
    about: [ everyone ] # view the 'About Bolt' page
    clearcache: [ admin ]
    contentaction: [ stepuser, judge, admin ]
    dashboard: [ everyone ]
    dbcheck: [ admin ]
    dbupdate: [ admin ]
    dbupdate_result: [ admin ]
    extensions: [ admin ]
    extensions:config: [ admin ]
    fileedit: [ admin ]
    files:config: [ admin ]
    files:theme: [ admin ]
    files:uploads: [ admin ]
    files: [ admin ]
    prefill: [ admin ]
    profile: [ everyone ] # edit own profile
    settings: [ admin, everyone ]
    translation: [ admin ]
    useraction: [ admin ] # enable/disable/delete
    useredit: [ admin ] # user settings
    users: [ admin ] # view user overview
    roles: [ admin ] # view the roles overview
    maintenance-mode: [ everyone ] # view the frontend when in maintenance mode
    omnisearch: [ everyone ]
    # Access to the various logs
    changelog: [ admin ]
    systemlog: [ admin ]
    # The following permissions are particularly important: login and postLogin
    # determine who may see and use the login form. If you set them to anything
    # but 'anonymous', only users will be able to log in that are logged in
    # already, which is probably never what you want.
    login: [ anonymous ]
    postLogin: [ anonymous ]
    # Likewise, 'logout' needs to be granted to 'everyone', otherwise people
    # cannot log out anymore.
    logout: [ everyone ]

# For content type related actions, permissions can be set individually for
# each content type. For this, we define three groups of permission sets.
# The 'contenttype-all' permission sets *overrides*; any roles specified here
# will grant a permission for all content types, regardless of the rest of this
# section.
# The 'contenttype-default' contains rules that are used when the desired
# content type does not define a rule for this permission itself.
# The 'contenttypes' section specifies permissions for individual content
# types.
#
# To understand how this works, it may be best to follow the permission checker
# through its decision-making process.
#
# First, it checks whether the current user is in the "root" role; if so, it
# short-circuits and always grants anything unconditionally.
#
# Otherwise, it checks whether any of the current user's roles match any of the
# roles in contenttype-all/{permission}. If so, the search is over, and the
# permission can be granted.
#
# The next step is to find contenttypes/{contenttype}/{permission}. If it is
# found, then the permission can be granted if and only if any of the user's
# roles match any role in contenttypes/{contenttype}/{permission}.
#
# If either contenttypes/{contenttype} or
# contenttypes/{contenttype}/{permission} is absent, the permission checker
# uses contenttype-default/{permission} instead. If any role exists in both the
# user's roles and contenttype-default/{permission}, the permission can be
# granted.
#
# Note especially that an *empty* set of roles in the contenttype section means
# something else than the *absence* of the permission. If the permission is
# defined with an empty role list, it overrides the role list in
# contenttype-default; but if the permission is not mentioned, the
# corresponding entry in contenttype-default applies.
#
# The following permissions are available on a per-contenttype basis:
#
# - edit: allows updating existing records
# - create: allows creating new records
# - publish: allows changing the status of a record to "published", as well as
#            scheduling a record for future publishing
# - depublish: allows changing the status of a record from "published"
# - delete: allows (hard) deletion of records
# - change-ownership: allows changing a record's owner. Note that ownership may
#                     grant additional permissions on a record, so this
#                     permission can indirectly enable users more permissions
#                     in ways that may not be immediately obvious.
# - view: allows viewing records in the backend
contenttype-all:
    edit: [ admin ]
    create: [ admin ]
    publish: [ admin ]
    depublish: [ admin ]
    delete: [ admin ]
    change-ownership: [ admin ]
    view: [ admin ]

contenttype-default:
    edit: [ owner ]
    create: [ admin ]
    change-ownership: [ admin ]
    view: [ admin ]

contenttypes:
    songs:
        edit: [ owner, admin ]
        create: [ stepuser, judge ]
        view: [ stepuser, judge ]
    reviews:
        edit: [ admin, judge ]
        create: [ judge ]
        view: [ judge ]
